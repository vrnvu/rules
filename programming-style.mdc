---
description: Programming style guidelines emphasizing simplicity and functional patterns
globs:
alwaysApply: true
---

# Programming Style Rules

## Core Principles

### Simplicity Over Complexity
- Implement correctly the first time
- Avoid shortcuts that create maintenance burden

### Prefer Functional Over OOP
- Use functions over classes
- Structure code around data transformations
- Favor composition over inheritance
- Prefer stateless functions
- Prefer functions that return concrete types over functinos that return "void"

## Code Structure

### Avoid Over-Engineering
- Minimize abstractions: classes and hierarchies
- Use simple control flow, if/else and exhaustive pattern match
- Use enums and strong type the code for exhaustive pattern matching
- No recursion - use iteration
- Set explicit upper bounds on loops

### Performance and Safety
- Consider performance from the start 
- Use assertions to detect errors early, see assertion style rules
- Handle errors explicitly
- Set resource limits: network, disk, memory, CPU
- Consider over our resoures: bandwith and latency

## Naming and Documentation

### Documentation
- Explain why, not what
- Document decisions
- Keep comments current
- Write minimal but meaningful documentation
- Do not use emojis
- Do not add unnecessary comments
- Assumme high seniority of software engineers will read the code

## Code Organization

### File Structure
- Single responsibility per file
- Group related functionality
- Minimize dependencies
- Define clear interfaces

### Function Design
- Keep functions small and focused
- Prefer pure functions
- Use explicit parameters
- Prefer return values over side effects

## Anti-Patterns

- Premature abstraction
- Complex factory patterns
- Deep inheritance
- Over-engineering
- Recursion
- Complex conditionals
- Nested loops
- Exception-driven flow
- Global state
- Hidden state
- Complex state machines
- Mutable data structures

## Anti-Clean Code Practices

- Don't follow clean code practices
- Too many small functions
- Inline simple functions instead of extracting them
- Prefer longer functions over many small ones
- Don't extract every single line into a function
- Avoid function extraction for trivial operations
- Keep related logic together in one function